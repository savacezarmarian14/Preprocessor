

typedef struct Node {
	char* value;
	char* key;
	struct Node* next;
}*Node;


typedef struct List {
 	Node head;
}*List;


Node newNode(char*, char*); /* create a new node with value=value */
List createList(); /* creates a new list with head = NULL */
void addElementToList(List, Node nodeToAdd); /* adds nodeToAdd in the back of the list */
int listSize(List);
int isEmpty(List list);
void printList(List, const char*);






typedef long(*HashFunction)(char*, int);


typedef struct {
	int hashmap_size;
  int hashmap_no_values;
	List *hashmap_slots;
	HashFunction hash_function;
}*HashMap;




long BASIC_HASH_FUNCTION(char*, int);


HashMap createHashMap(int, HashFunction);


void putInHashMap(HashMap, char*, char*);


char* valueOfKey(HashMap, char*);


int exists(HashMap, char*, char);


void printHashMap(HashMap);	


Node popFirst(HashMap);
int main(int argc, char* argv[]) {
	printf("Hello, %d ---- %d------World! %d\n" , 1, 7, 99);
	return 0;
}
----------------------------------------------------
